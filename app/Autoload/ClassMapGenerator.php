<?php

namespace App\Autoload;

use App\Helpers\Filesystem;

class ClassMapGenerator {
    /**
     * Generates a classmap and writes it to the specified file
     *
     * @param string $directory the directory to scan
     * @param string $file      the target file for the classmap to be written to
     */
    public static function generate(string $directory, string $file) {
        file_put_contents($file, self::createMap($directory));
    }

    /**
     * Generates a classmap
     *
     * @param string $path the directory to scan
     * @return string the resulting classmap
     */
    public static function createMap(string $path) {
        $files = Filesystem::findFiles($path, '*.php');
        $classes = [];

        foreach($files as $file) {
            $fqcn = self::getFullyQualifiedClassName($file->getRealPath());

            //Check if a classname was found
            if($fqcn === '') {
                continue;
            }

            $classes[$fqcn] = 'base_path("packages") . "/'.Filesystem::correctDS($file->getRelativePathname()).'"';
        }

        // Return the code output
        return self::createFile($classes);
    }

    /**
     * Returns the fully qualified classname from a file (if applicable)
     *
     * @param string $filepath the target file to check
     * @return string the resulting fqcn, empty if not found
     */
    private static function getFullyQualifiedClassName(string $filepath): string {
        $code = file_get_contents($filepath);
        $tokens = token_get_all($code);
        $class = $namespace = '';

        for($i = 0; $i < count($tokens); $i++) {
            if($tokens[$i][0] === T_NAMESPACE) {
                for($j = $i + 1; $j < count($tokens); $j++) {
                    if($tokens[$j][0] === T_STRING) {
                        $namespace .= $tokens[$j][1].'\\';
                    }
                    else {
                        if($tokens[$j] === '{' || $tokens[$j] === ';') {
                            break;
                        }
                    }
                }
            }

            if($tokens[$i][0] === T_CLASS) {
                for($j = $i + 1; $j < count($tokens); $j++) {
                    if($tokens[$j] === '{') {
                        $class = $tokens[$i + 2][1];
                        break;
                    }
                    else {
                        if($tokens[$j] === ')') {
                            break;
                        }
                        else {
                            if($tokens[$j][1] === '->') {
                                break;
                            }
                        }
                    }
                }
            }
        }

        //Return nothing if the classname was not found
        if($class === '') {
            return '';
        }

        return $namespace.$class;
    }

    /**
     * Generates a classmap using the input array
     *
     * @param array $map
     * @return string
     */
    public static function createFile(array $map) {
        //Get the current timestamp
        $timestamp = date("d-m-Y H:m:s");

        $arrayContent = "\n";

        foreach($map as $className => $file) {
            $arrayContent .= "'$className' => $file,\n";
        }

        //Generate the classmap
        $code = <<<CODE
<?php

// Do not modify - changes will be overwritten
// Automatically @generated by Shoutz0r at $timestamp

return [$arrayContent];
CODE;

        // Return the code output
        return $code;
    }
}

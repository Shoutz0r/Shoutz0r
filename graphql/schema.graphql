#import scalar/*.graphql
#import type/*.graphql
#import enum/*.graphql
#import input/*.graphql

type Query {
    "Fetch single user"
    user(
        id: ID @eq @rules(apply: ["prohibits:username", "required_without:username"])
        username: String @eq @rules(apply: ["prohibits:id", "required_without:id", "username"])
    ): User @find

    "Fetch multiple users"
    users(
        username: String! @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Fetch media file"
    media(id: ID! @eq): Media @find

    "Fetch multiple media files"
    medias(
        title: String! @where(operator: "like")
    ): [Media!]! @paginate(defaultCount: 10)

    "Fetch artist"
    artist(id: ID! @eq): Artist @find

    "Fetch multiple artists"
    artists(
        name: String! @where(operator: "like")
    ): [Artist!]! @paginate(defaultCount: 10)

    "Fetch album"
    album(id: ID! @eq): Album @find

    "Fetch multiple albums"
    albums(
        title: String! @where(operator: "like")
    ): [Album!]! @paginate(defaultCount: 10)

    "Fetch Request"
    request(id: ID! @eq): Request @find

    "Fetch multiple requests"
    requests(
        where: _ @whereConditions(columns: ["played_at"])
        orderBy: RequestsOrderBy @orderBy
    ): [Request!]! @orderBy(column: "requested_at" direction: ASC) @paginate(defaultCount: 10)

    "Fetch Role"
    role(id: ID! @eq): Role @find

    "Fetch all roles"
    roles: [Role!]! @paginate(defaultCount: 10)

    "Fetch Permission"
    permission(id: ID! @eq): Permission @find

    "Fetch multiple permissions"
    permissions(
        name: String! @where(operator: "like")
    ): [Permission!]! @paginate(defaultCount: 20)
}

type Mutation {
    _ : Boolean @all
}

type Subscription {
    lastPlayedUpdated: Request
        @subscription(class: "App\\GraphQL\\Subscriptions\\LastPlayedUpdated")
}

#import sanctum.graphql

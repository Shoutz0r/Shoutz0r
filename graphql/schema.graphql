#import scalar/*.graphql
#import interface/*.graphql
#import type/*.graphql
#import enum/*.graphql
#import input/*.graphql

type Query {
    "Fetch single user"
    user(
        id: ID @eq @rules(apply: ["prohibits:username", "required_without:username"])
        username: String @eq @rules(apply: ["prohibits:id", "required_without:id", "username"])
    ): User @find

    "Fetch multiple users"
    users(
        username: String @where(operator: "like")
    ): [User!]!
        @canAccess(permissions: ["admin.user.list"], requireAuth: true)
        @paginate(defaultCount: 10)

    "Fetch media file"
    media(id: ID! @eq): Media @find

    "Fetch multiple media files"
    medias(
        title: String! @where(operator: "like")
    ): [Media!]! @paginate(defaultCount: 10)

    "Fetch artist"
    artist(id: ID! @eq): Artist @find

    "Fetch multiple artists"
    artists(
        name: String! @where(operator: "like")
    ): [Artist!]! @paginate(defaultCount: 10)

    "Fetch album"
    album(id: ID! @eq): Album @find

    "Fetch multiple albums"
    albums(
        title: String! @where(operator: "like")
    ): [Album!]! @paginate(defaultCount: 10)

    "Fetch Request"
    request(id: ID! @eq): Request @find

    "Fetch multiple requests"
    requests(
        where: _ @whereConditions(columns: ["played_at"])
        orderBy: RequestsOrderBy @orderBy
    ): [Request!]!
        @orderBy(column: "requested_at" direction: ASC)
        @paginate(defaultCount: 10)

    "Fetch Role"
    role(
        id: ID @eq
        name: String @eq
    ): Role
        @can(ability: "view", resolved: true)
        @find

    "Fetch all roles"
    roles: [Role!]!
        @can(ability: "view")
        @paginate(defaultCount: 10)

    "Fetch Permission"
    permission(id: ID! @eq): Permission
        @cache
        @find

    "Fetch multiple permissions"
    permissions(
        name: String @where(operator: "like")
    ): [Permission!]!
        @cache
        @all

    "Fetch multiple uploads"
    uploads(
        where: _ @whereConditions(columns: ["uploaded_by", "status"])
        orderBy: UploadsOrderBy @orderBy
    ): [Upload!]!
        @orderBy(column: "uploaded_at" direction: ASC)
        @paginate(defaultCount: 10)

    search(
        q: String! @rules(apply: ["required"])
    ): SearchResult!

    topMedia(
        artist: ID
        album: ID
        limit: Int @limit
    ): [Media!]
        @canAccess(permissions: ["website.access"])
        @field(resolver: "TopMedia")

    topAlbums(
        artist: ID!
        limit: Int @limit
    ): [Album!]
        @canAccess(permissions: ["website.access"])
        @field(resolver: "TopAlbums")

    topArtists(
        album: ID!
        limit: Int @limit
    ): [Artist!]
        @canAccess(permissions: ["website.access"])
        @field(resolver: "TopArtists")

    userCount: Int!
        @canAccess(permissions: ["admin.access"], requireAuth: true)
        @count(model: "App\\Models\\User")

    mediaCount: Int!
        @canAccess(permissions: ["admin.access"], requireAuth: true)
        @count(model: "App\\Models\\Media")

    albumCount: Int!
        @canAccess(permissions: ["admin.access"], requireAuth: true)
        @count(model: "App\\Models\\Album")
}

type Mutation {
    whoami: WhoamiResponse!
        @canAccess(permissions: ["website.access"])

    lastPlayed: lastPlayedResponse
        @canAccess(permissions: ["website.access"])

    addRequest(id: ID!): AddRequestResponse!
        @canAccess(permissions: ["website.request"])
}

type Subscription {
    requestAdded: Request
        @canAccess(permissions: ["website.access"])
        @subscription(class: "\\App\\GraphQL\\Subscriptions\\RequestAdded")
}

type lastPlayedResponse {
    request: Request
}

type WhoamiResponse {
    user: User!
}

type AddRequestResponse {
    success: Boolean!,
    message: String
}

type LoginResponse {
    token: String!
}

#import sanctum.graphql
